#61: Wizardry-Gatekeeper-patch-3C Implement password policies and account lockout

1: Define a password policy, including requirements for password complexity, length, and expiration:
 - Review existing password policies and relevant security standards to create a new password policy that meets the project's requirements.
 - Determine the password complexity requirements, such as minimum length, required character types (e.g., uppercase, lowercase, numbers, special characters), and disallowed patterns (e.g., dictionary words, common passwords).
 - Define the password expiration policy, such as the maximum age of a password, password history, and the frequency of password changes.

2: Implement password validation logic to ensure that new passwords meet the defined policy:
 - Implement server-side validation logic to check that new passwords meet the defined password policy.
 - Provide user feedback to indicate the password policy requirements and any errors in password input.

3: Implement password encryption to securely store user passwords in the database:
 - Select a secure password encryption algorithm and implement it in the codebase.
 - Ensure that the password encryption implementation follows best practices and security standards.

4: Implement an account lockout mechanism to prevent brute-force attacks and unauthorized access attempts:
 - Define the account lockout policy, such as the maximum number of failed login attempts before an account is locked out and the duration of the lockout.
 - Implement logic to track failed login attempts and enforce the lockout policy.
 - Provide user feedback to indicate the account lockout status and any errors in login attempts.

5: Add user interface elements to display password requirements and lockout status to users:
 - Add UI elements to the login and password reset pages to display the password policy requirements and lockout status to users.

6: Write integration tests to verify the correct functioning of the password policy and lockout mechanisms:
 - Write integration tests to ensure that password validation and encryption work as expected.
 - Write integration tests to ensure that the account lockout mechanism works as expected.

7: Refactor code to improve readability and maintainability:
 - Review the codebase to identify areas that could benefit from refactoring.
 - Prioritize areas based on their impact on readability, maintainability, and performance, as well as the effort required to refactor.
 - Develop a plan for each area that outlines the changes to be made and the expected outcomes (e.g., improved code structure, reduced complexity, better documentation).
 - Apply coding best practices and standards, such as naming conventions, code commenting, and modularization, to the codebase.
